@import domain._
@(version: String, platform: Platform, vendor: String, executableBinary: String)#!/bin/bash
#Post Hook: linux-jmc-tarball
function __sdkman_post_installation_hook {
    __sdkman_echo_debug "A @{platform.name} post-install hook was found for JMC @vendor @version."

    __sdkman_validate_binary_input "$binary_input" || return 1

    local present_dir="$(pwd)"
    local work_dir="${SDKMAN_DIR}/tmp/out"
    local executable_binary="@{executableBinary}"

    echo ""
    __sdkman_echo_green "Repackaging JMC @vendor @version..."

    mkdir -p "$work_dir"
    @if(vendor == "zulu") {
    # deal with zulu folder structure
    /usr/bin/env tar zxf "$binary_input" -C "$work_dir"
    cd "$work_dir"/*
    } else {
    # deal with jmc flat structure
    local containing_folder="$work_dir/jmc-@{version}"
    mkdir -p "$containing_folder"
    /usr/bin/env tar zxf "$binary_input" -C "$containing_folder"
    cd "$containing_folder"
    }
    mkdir bin
    ln --relative --symbolic "$executable_binary" bin/jmc

    cd "$work_dir"
    /usr/bin/env zip -qyr "$zip_output" .
    cd "$present_dir"

    echo ""
    __sdkman_echo_green "Done repackaging..."

    __sdkman_echo_debug "Cleaning up residual files..."
    rm "$binary_input"
    rm -rf "$work_dir"
}

function __sdkman_validate_binary_input {
    if ! tar tzf "$1" &> /dev/null; then
        __sdkman_echo_red "Download has failed, aborting!"
        echo ""
        __sdkman_echo_red "Can not install java @version at this time..."
        return 1
    fi
}
